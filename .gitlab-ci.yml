variables:
  GIT_STRATEGY: clone

stages:
- build
- cleanup
- deploy

build:
  script:
    # Base npm install + configure binaries
    - npm install
    - ln -s $(pwd)/node_modules/.bin/babel /usr/bin/babel
    # Build client
    - npm run build >> output
    # Show full build output to console
    - cat output
    # Build server
    - NODE_ENV=production babel server -d build-server
  stage: build
  tags:
    - nodejs
  artifacts:
    paths:
    - build/
    - build-server/
    - package.json
    when: on_success
    expire_in: 1 day
  allow_failure: false

deploy:
  script:
  - git checkout $CI_BUILD_REF_NAME
  - 'which distelli || (wget -qO- https://www.distelli.com/download/client | sh)'
  - "echo \"DistelliAccessToken: '$DISTELLI_ACCESS_TOKEN'\" > /etc/distelli.yml"
  - "echo \"DistelliSecretKey: '$DISTELLI_SECRET_KEY'\" >> /etc/distelli.yml"
  - echo "Environments:" >> /etc/distelli.yml
  - echo "  - EVE-Exchange-Frontend-Production" >> /etc/distelli.yml
  - '"/usr/local/bin/distelli" login -conf /etc/distelli.yml'
  - '"/usr/local/bin/distelli" deploy -q -y -m "Deployment from Gitlab" -f distelli-manifest-frontend.yml --env EVE-Exchange-Frontend-Production'
  stage: deploy
  environment: production
  only:
    - master
  tags:
    - nodejs
  allow_failure: false

cleanup_build:
  stage: cleanup
  script:
  - git clean -f
  - rm -rf horizon
  when: on_failure
