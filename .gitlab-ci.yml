stages:
- build
- cleanup
- deploy

before_script:
  # Download & configure Distelli CLI
  - 'which distelli || (wget -qO- https://www.distelli.com/download/client | sh)'
  - "echo DistelliAccessToken: '$DISTELLI_ACCESS_TOKEN' > /root/distelli.yml"
  - "echo DistelliSecretKey: '$DISTELLI_SECRET_KEY' >> /root/distelli.yml"
  - echo "Environments:" >> /root/distelli.yml
  - echo "  - EVEForecasterProduction" >> /root/distelli.yml
  - "/usr/local/bin/distelli" login -conf /root/distelli.yml

build:
  script:
    # SSH agent/key
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_DEPLOY_KEY")
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    # Get submodule
    - git submodule sync
    - git submodule update --init --remote --recursive
    # Build horizon client
    - cd horizon/client
    - npm install
    - npm run compile && npm run build
    # Build ETF
    - cd ../..
    - npm install
    - NODE_ENV=production "node_modules/.bin/rollup" -c rollup.prod.config.js >> output
    - cat output
    - if grep 'Error:' output; then exit 1; else echo Build success; fi
    - rm output
    - NODE_ENV=production "node_modules/.bin/babel" server -d build-server
  stage: build
  tags:
    - nodejs
  allow_failure: false

deploy:
  script:
    - distelli deploy -q -y -m "Deployment from Gitlab" --env EVEForecasterProduction
  stage: deploy
  environment: production
  only:
    - master
  tags:
    - nodejs
  allow_failure: false

cleanup_build:
  stage: cleanup
  script:
  - git clean -f
  - rm -rf horizon
  when: on_failure
