variables:
  GIT_STRATEGY: clone

stages:
- build
- cleanup
- deploy

build:
  script:
    # SSH agent/key
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_DEPLOY_KEY")
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    # Pull submodule
    - git submodule sync
    - git submodule update --init --remote --recursive
    # Base npm install + configure binaries
    - npm install
    - ln -s $(pwd)/node_modules/.bin/babel /usr/bin/babel
    - ln -s $(pwd)/node_modules/.bin/rollup /usr/bin/rollup
    # Build horizon client
    - cd horizon/client
    - npm install
    - npm run compile && npm run build
    # Build client
    - cd ../..
    - rollup -c rollup.prod.config.js >> output
    # Show full build output to console and check for errors
    - cat output
    - if grep 'Error:' output; then exit 1; else echo Build success; fi
    - rm output
    # Build server
    - NODE_ENV=production babel server -d build-server
    # Copy assets
    - mkdir build/assets
    - cp -r client/assets/** build/assets
  stage: build
  tags:
    - nodejs
  artifacts:
    paths:
    - build/
    - build-server/
    - package.json
    - .babelrc
    when: on_success
    expire_in: 1 day
  allow_failure: false

deploy:
  script:
  - git checkout $CI_BUILD_REF_NAME
  - 'which distelli || (wget -qO- https://www.distelli.com/download/client | sh)'
  - "echo \"DistelliAccessToken: '$DISTELLI_ACCESS_TOKEN'\" > /etc/distelli.yml"
  - "echo \"DistelliSecretKey: '$DISTELLI_SECRET_KEY'\" >> /etc/distelli.yml"
  - echo "Environments:" >> /etc/distelli.yml
  - echo "  - EVEForecasterProduction" >> /etc/distelli.yml
  - '"/usr/local/bin/distelli" login -conf /etc/distelli.yml'
  - '"/usr/local/bin/distelli" deploy -q -y -m "Deployment from Gitlab" --env EVEForecasterProduction'
  stage: deploy
  environment: production
  only:
    - master
  tags:
    - nodejs
  allow_failure: false

cleanup_build:
  stage: cleanup
  script:
  - git clean -f
  - rm -rf horizon
  when: on_failure
